# Example of using MCMC to generate a Bayesian posterior distribution for each parameter

# Originally published as a fitting job to be run in BioNetFit 1 in:
# Harmon et. al., "Timescale Separation of Positive and Negative Signaling Creates History-Dependent 
# Responses to IgE Receptor Stimulation" Scientific Reports, 2017

# The results of this run are expected to reproduce figure S10 in Harmon et al. 

# A large number of samples is needed to get a good distribution, so we recommend running on a cluster. 
# An example batch file to submit the job on a SLURM cluster is provided. 

#############
### PATHS ###
#############

# The directory to which job output will be written
output_dir=output/mcmc

# The BioNetGen executable - taken from system $BNGPATH

# The model file to be used in fitting simulations
model=model_tofit.bngl: p1_5.exp , p3_5.exp , p3_30.exp , p3_60.exp , p3_120.exp , p3_240.exp

#######################
### General Options ###
#######################


# Kill a job and move on without it if it runs over
wall_time_sim=180


verbosity=1
delete_old_files=1

#######################
### Fitting Options ###
#######################

# The original paper used 30 chains, burn in 20000, run 200000
# We'll parallelize it more and get the same number of samples off of 120 chains

# Each chain runs 65000 iterations.
max_iterations=65000
# Run Bayesian MCMC
fit_type=bmc
# Run 120 independent chains
population_size=120
# Don't sample from the first 20000 iterations, allowing time to equilibrate
burn_in=20000
# After the burn in, save a sample every 20 iterations. 
sample_every=20
# Every 5000 iterations, output histograms showing the current posterior distributions.
output_hist_every=5000
# Each histogram contains 20 bins.
hist_bins=20

# Save a backup of the algorithm every 50 iterations
backup_every=50
# Use a chi-squared objective function. 
objfunc=chi_sq

# lognormal priors used in Harmon et al.
lognormal_var=X_tot__FREE__	0.787694978391513	1
lognormal_var=k_Xoff__FREE__	-5.71806966151439	1
lognormal_var=k_Xon__FREE__	4.97304329331453	1
lognormal_var=kase__FREE__	0.575353224191223	1
lognormal_var=kdegX__FREE__	-3.49603202484465	1
lognormal_var=kdegran__FREE__	5.2762165162286	1
lognormal_var=km_Ship1__FREE__	-2.8441958935579	1
lognormal_var=km_Syk__FREE__	-0.540934567116634	1
lognormal_var=km_x__FREE__	-0.950063496638449	1
lognormal_var=koff__FREE__	-2.35098513455981	1
lognormal_var=kp_Ship1__FREE__	4.04458104776259	1
lognormal_var=kp_Syk__FREE__	5.42400341236735	1
lognormal_var=kp_x__FREE__	5.89295898292639	1
lognormal_var=kpten__FREE__	-2.00213621038853	1
lognormal_var=ksynth1__FREE__	-1.73299236261513	1
lognormal_var=pase__FREE__	-0.795319997542839	1



